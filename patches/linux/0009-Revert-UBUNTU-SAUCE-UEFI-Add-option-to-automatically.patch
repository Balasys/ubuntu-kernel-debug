From df61fe13aea02a28e07e52f5875c33a93910c6e3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jakab=20Krist=C3=B3f?= <jakab.kristof@balasys.hu>
Date: Thu, 14 Jul 2016 08:37:38 +0200
Subject: [PATCH 09/19] Revert "UBUNTU: SAUCE: UEFI: Add option to
 automatically enforce module signatures when in Secure Boot mode"

This reverts commit 7d11425612af300ee9ad0cc01257f5152dc7e66c.
---
 Documentation/x86/zero-page.txt       |  2 --
 arch/x86/Kconfig                      | 10 ----------
 arch/x86/boot/compressed/eboot.c      | 36 -----------------------------------
 arch/x86/include/uapi/asm/bootparam.h |  3 +--
 arch/x86/kernel/setup.c               |  7 -------
 include/linux/module.h                |  6 ------
 kernel/module.c                       |  7 -------
 7 files changed, 1 insertion(+), 70 deletions(-)

diff --git a/Documentation/x86/zero-page.txt b/Documentation/x86/zero-page.txt
index a811210..82fbdbc 100644
--- a/Documentation/x86/zero-page.txt
+++ b/Documentation/x86/zero-page.txt
@@ -30,8 +30,6 @@ Offset	Proto	Name		Meaning
 1E9/001	ALL	eddbuf_entries	Number of entries in eddbuf (below)
 1EA/001	ALL	edd_mbr_sig_buf_entries	Number of entries in edd_mbr_sig_buffer
 				(below)
-1EB/001	ALL     kbd_status      Numlock is enabled
-1EC/001	ALL     secure_boot	Secure boot is enabled in the firmware
 1EF/001	ALL	sentinel	Used to detect broken bootloaders
 290/040	ALL	edd_mbr_sig_buffer EDD MBR signatures
 2D0/A00	ALL	e820_map	E820 memory map table
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 24b2c05..ac2d50c 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1728,16 +1728,6 @@ config EFI_MIXED
 
 	   If unsure, say N.
 
-config EFI_SECURE_BOOT_SIG_ENFORCE
-        def_bool n
-	prompt "Force module signing when UEFI Secure Boot is enabled"
-	---help---
-	  UEFI Secure Boot provides a mechanism for ensuring that the
-	  firmware will only load signed bootloaders and kernels. Certain
-	  use cases may also require that all kernel modules also be signed.
-	  Say Y here to automatically enable module signature enforcement
-	  when a system boots with UEFI Secure Boot enabled.
-
 config SECCOMP
 	def_bool y
 	prompt "Enable seccomp to safely compute untrusted bytecode"
diff --git a/arch/x86/boot/compressed/eboot.c b/arch/x86/boot/compressed/eboot.c
index 1b13869..16edc0f 100644
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@ -12,7 +12,6 @@
 #include <asm/efi.h>
 #include <asm/setup.h>
 #include <asm/desc.h>
-#include <asm/bootparam_utils.h>
 
 #include "../string.h"
 #include "eboot.h"
@@ -832,37 +831,6 @@ out:
 	return status;
 }
 
-static int get_secure_boot(void)
-{
-	u8 sb, setup;
-	unsigned long datasize = sizeof(sb);
-	efi_guid_t var_guid = EFI_GLOBAL_VARIABLE_GUID;
-	efi_status_t status;
-
-	status = efi_early->call((unsigned long)sys_table->runtime->get_variable,
-				L"SecureBoot", &var_guid, NULL, &datasize, &sb);
-
-	if (status != EFI_SUCCESS)
-		return 0;
-
-	if (sb == 0)
-		return 0;
-
-
-	status = efi_early->call((unsigned long)sys_table->runtime->get_variable,
-				L"SetupMode", &var_guid, NULL, &datasize,
-				&setup);
-
-	if (status != EFI_SUCCESS)
-		return 0;
-
-	if (setup == 1)
-		return 0;
-
-	return 1;
-}
-
-
 /*
  * See if we have Graphics Output Protocol
  */
@@ -1452,10 +1420,6 @@ struct boot_params *efi_main(struct efi_config *c,
 	else
 		setup_boot_services32(efi_early);
 
-	sanitize_boot_params(boot_params);
-
-	boot_params->secure_boot = get_secure_boot();
-
 	setup_graphics(boot_params);
 
 	setup_efi_pci(boot_params);
diff --git a/arch/x86/include/uapi/asm/bootparam.h b/arch/x86/include/uapi/asm/bootparam.h
index 74ba408..ab456dc 100644
--- a/arch/x86/include/uapi/asm/bootparam.h
+++ b/arch/x86/include/uapi/asm/bootparam.h
@@ -134,8 +134,7 @@ struct boot_params {
 	__u8  eddbuf_entries;				/* 0x1e9 */
 	__u8  edd_mbr_sig_buf_entries;			/* 0x1ea */
 	__u8  kbd_status;				/* 0x1eb */
-	__u8  secure_boot;				/* 0x1ec */
-	__u8  _pad5[2];					/* 0x1ed */
+	__u8  _pad5[3];					/* 0x1ec */
 	/*
 	 * The sentinel is set to a nonzero value (0xff) in header.S.
 	 *
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 3064c81..1e6f70f 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -1160,13 +1160,6 @@ void __init setup_arch(char **cmdline_p)
 
 	io_delay_init();
 
-#ifdef CONFIG_EFI_SECURE_BOOT_SIG_ENFORCE
-	if (boot_params.secure_boot) {
-		enforce_signed_modules();
-		pr_info("Secure boot enabled\n");
-	}
-#endif
-
 	/*
 	 * Parse the ACPI tables for possible boot-time SMP configuration.
 	 */
diff --git a/include/linux/module.h b/include/linux/module.h
index 4b8df91..db38634 100644
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -273,12 +273,6 @@ const struct exception_table_entry *search_exception_tables(unsigned long add);
 
 struct notifier_block;
 
-#ifdef CONFIG_MODULE_SIG
-extern void enforce_signed_modules(void);
-#else
-static inline void enforce_signed_modules(void) {};
-#endif
-
 #ifdef CONFIG_MODULES
 
 extern int modules_disabled; /* for sysctl */
diff --git a/kernel/module.c b/kernel/module.c
index e5117b67..88bd7ec 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -4102,13 +4102,6 @@ void module_layout(struct module *mod,
 EXPORT_SYMBOL(module_layout);
 #endif
 
-#ifdef CONFIG_MODULE_SIG
-void enforce_signed_modules(void)
-{
-	sig_enforce = true;
-}
-#endif
-
 bool secure_modules(void)
 {
 #ifdef CONFIG_MODULE_SIG
-- 
2.9.2

