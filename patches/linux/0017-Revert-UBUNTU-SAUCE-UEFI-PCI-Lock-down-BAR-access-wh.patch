From 517ae823f303a49200643d4b20a0b73a89dec082 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jakab=20Krist=C3=B3f?= <jakab.kristof@balasys.hu>
Date: Thu, 14 Jul 2016 08:37:45 +0200
Subject: [PATCH 17/19] Revert "UBUNTU: SAUCE: UEFI: PCI: Lock down BAR access
 when module security is enabled"

This reverts commit 09716843d01d94a148957db6fe6d0abfa096974f.
---
 drivers/pci/pci-sysfs.c | 10 ----------
 drivers/pci/proc.c      |  8 +-------
 drivers/pci/syscall.c   |  3 +--
 3 files changed, 2 insertions(+), 19 deletions(-)

diff --git a/drivers/pci/pci-sysfs.c b/drivers/pci/pci-sysfs.c
index 404c133..5f7cbea 100644
--- a/drivers/pci/pci-sysfs.c
+++ b/drivers/pci/pci-sysfs.c
@@ -30,7 +30,6 @@
 #include <linux/vgaarb.h>
 #include <linux/pm_runtime.h>
 #include <linux/of.h>
-#include <linux/module.h>
 #include "pci.h"
 
 static int sysfs_initialized;	/* = 0 */
@@ -714,9 +713,6 @@ static ssize_t pci_write_config(struct file *filp, struct kobject *kobj,
 	loff_t init_off = off;
 	u8 *data = (u8 *) buf;
 
-	if (secure_modules())
-		return -EPERM;
-
 	if (off > dev->cfg_size)
 		return 0;
 	if (off + count > dev->cfg_size) {
@@ -1011,9 +1007,6 @@ static int pci_mmap_resource(struct kobject *kobj, struct bin_attribute *attr,
 	resource_size_t start, end;
 	int i;
 
-	if (secure_modules())
-		return -EPERM;
-
 	for (i = 0; i < PCI_ROM_RESOURCE; i++)
 		if (res == &pdev->resource[i])
 			break;
@@ -1114,9 +1107,6 @@ static ssize_t pci_write_resource_io(struct file *filp, struct kobject *kobj,
 				     struct bin_attribute *attr, char *buf,
 				     loff_t off, size_t count)
 {
-	if (secure_modules())
-		return -EPERM;
-
 	return pci_resource_io(filp, kobj, attr, buf, off, count, true);
 }
 
diff --git a/drivers/pci/proc.c b/drivers/pci/proc.c
index 4265ea0..3f155e7 100644
--- a/drivers/pci/proc.c
+++ b/drivers/pci/proc.c
@@ -116,9 +116,6 @@ static ssize_t proc_bus_pci_write(struct file *file, const char __user *buf,
 	int size = dev->cfg_size;
 	int cnt;
 
-	if (secure_modules())
-		return -EPERM;
-
 	if (pos >= size)
 		return 0;
 	if (nbytes >= size)
@@ -198,9 +195,6 @@ static long proc_bus_pci_ioctl(struct file *file, unsigned int cmd,
 #endif /* HAVE_PCI_MMAP */
 	int ret = 0;
 
-	if (secure_modules())
-		return -EPERM;
-
 	switch (cmd) {
 	case PCIIOC_CONTROLLER:
 		ret = pci_domain_nr(dev->bus);
@@ -239,7 +233,7 @@ static int proc_bus_pci_mmap(struct file *file, struct vm_area_struct *vma)
 	struct pci_filp_private *fpriv = file->private_data;
 	int i, ret;
 
-	if (!capable(CAP_SYS_RAWIO) || secure_modules())
+	if (!capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
 	/* Make sure the caller is mapping a real resource for this device */
diff --git a/drivers/pci/syscall.c b/drivers/pci/syscall.c
index 98f5637..b91c4da 100644
--- a/drivers/pci/syscall.c
+++ b/drivers/pci/syscall.c
@@ -10,7 +10,6 @@
 #include <linux/errno.h>
 #include <linux/pci.h>
 #include <linux/syscalls.h>
-#include <linux/module.h>
 #include <asm/uaccess.h>
 #include "pci.h"
 
@@ -93,7 +92,7 @@ SYSCALL_DEFINE5(pciconfig_write, unsigned long, bus, unsigned long, dfn,
 	u32 dword;
 	int err = 0;
 
-	if (!capable(CAP_SYS_ADMIN) || secure_modules())
+	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
 	dev = pci_get_bus_and_slot(bus, dfn);
-- 
2.9.2

